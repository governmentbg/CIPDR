import{b as baseClone,i as isUndefined,m as map,G as Graph,l as layout}from"./layout-7899ed33.js";import{c as createLabel,i as intersectRect,a as insertMarkers,b as clear$2,d as clear$3,u as updateNodeBounds,s as setNodeElem,e as insertNode,f as insertEdgeLabel,p as positionNode,g as insertEdge,h as positionEdgeLabel}from"./edges-ecd2ecb8.js";import{l as log,q as evaluate,c as getConfig,j as d3select}from"./mermaid-f185fde2.js";import{c as createText}from"./createText-6836bc4a.js";var CLONE_SYMBOLS_FLAG=4;function clone(e){return baseClone(e,CLONE_SYMBOLS_FLAG)}function write(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:writeNodes(e),edges:writeEdges(e)};return isUndefined(e.graph())||(t.value=clone(e.graph())),t}function writeNodes(n){return map(n.nodes(),function(e){var t=n.node(e),r=n.parent(e),e={v:e};return isUndefined(t)||(e.value=t),isUndefined(r)||(e.parent=r),e})}function writeEdges(n){return map(n.edges(),function(e){var t=n.edge(e),r={v:e.v,w:e.w};return isUndefined(e.name)||(r.name=e.name),isUndefined(t)||(r.value=t),r})}let clusterDb={},descendants={},parents={};const clear$1=()=>{descendants={},parents={},clusterDb={}},isDescendant=(e,t)=>(log.trace("In isDecendant",t," ",e," = ",descendants[t].includes(e)),!!descendants[t].includes(e)),edgeInCluster=(e,t)=>(log.info("Decendants of ",t," is ",descendants[t]),log.info("Edge is ",e),e.v===t?!1:e.w!==t&&(descendants[t]?descendants[t].includes(e.v)||isDescendant(e.v,t)||isDescendant(e.w,t)||descendants[t].includes(e.w):(log.debug("Tilt, ",t,",not in decendants"),!1))),copy=(n,i,a,s)=>{log.warn("Copying children of ",n,"root",s,"data",i.node(n),s);const e=i.children(n)||[];n!==s&&e.push(n),log.warn("Copying (nodes) clusterId",n,"nodes",e),e.forEach(e=>{if(0<i.children(e).length)copy(e,i,a,s);else{var t=i.node(e);log.info("cp ",e," to ",s," with parent ",n),a.setNode(e,t),s!==i.parent(e)&&(log.warn("Setting parent",e,i.parent(e)),a.setParent(e,i.parent(e))),n!==s&&e!==n?(log.debug("Setting parent",e,n),a.setParent(e,n)):(log.info("In copy ",n,"root",s,"data",i.node(n),s),log.debug("Not Setting parent for node=",e,"cluster!==rootId",n!==s,"node!==clusterId",e!==n));const r=i.edges(e);log.debug("Copying Edges",r),r.forEach(e=>{log.info("Edge",e);var t=i.edge(e.v,e.w,e.name);log.info("Edge data",t,s);try{edgeInCluster(e,s)?(log.info("Copying as ",e.v,e.w,t,e.name),a.setEdge(e.v,e.w,t,e.name),log.info("newGraph edges ",a.edges(),a.edge(a.edges()[0]))):log.info("Skipping copy of edge ",e.v,"--\x3e",e.w," rootId: ",s," clusterId:",n)}catch(e){log.error(e)}})}log.debug("Removing node",e),i.removeNode(e)})},extractDescendants=(e,t)=>{var r=t.children(e);let n=[...r];for(const i of r)parents[i]=e,n=[...n,...extractDescendants(i,t)];return n},findNonClusterChild=(e,t)=>{log.trace("Searching",e);var r=t.children(e);if(log.trace("Searching children of id ",e,r),r.length<1)return log.trace("This is a valid node",e),e;for(const i of r){var n=findNonClusterChild(i,t);if(n)return log.trace("Found replacement for",e," => ",n),n}},getAnchorId=e=>clusterDb[e]&&(clusterDb[e].externalConnections&&clusterDb[e])?clusterDb[e].id:e,adjustClustersAndEdges=(d,e)=>{!d||10<e?log.debug("Opting out, no graph "):(log.debug("Opting in, graph "),d.nodes().forEach(function(e){0<d.children(e).length&&(log.warn("Cluster identified",e," Replacement id in edges: ",findNonClusterChild(e,d)),descendants[e]=extractDescendants(e,d),clusterDb[e]={id:findNonClusterChild(e,d),clusterData:d.node(e)})}),d.nodes().forEach(function(t){var e=d.children(t);const r=d.edges();0<e.length?(log.debug("Cluster identified",t,descendants),r.forEach(e=>{e.v!==t&&e.w!==t&&isDescendant(e.v,t)^isDescendant(e.w,t)&&(log.warn("Edge: ",e," leaves cluster ",t),log.warn("Decendants of XXX ",t,": ",descendants[t]),clusterDb[t].externalConnections=!0)})):log.debug("Not a cluster ",t,descendants)}),d.edges().forEach(function(e){const t=d.edge(e);log.warn("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),log.warn("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(d.edge(e)));let r=e.v,n=e.w;if(log.warn("Fix XXX",clusterDb,"ids:",e.v,e.w,"Translating: ",clusterDb[e.v]," --- ",clusterDb[e.w]),clusterDb[e.v]&&clusterDb[e.w]&&clusterDb[e.v]===clusterDb[e.w]){log.warn("Fixing and trixing link to self - removing XXX",e.v,e.w,e.name),log.warn("Fixing and trixing - removing XXX",e.v,e.w,e.name),r=getAnchorId(e.v),n=getAnchorId(e.w),d.removeEdge(e.v,e.w,e.name);var i=e.w+"---"+e.v;d.setNode(i,{domId:i,id:i,labelStyle:"",labelText:t.label,padding:0,shape:"labelRect",style:""});const a=JSON.parse(JSON.stringify(t)),s=JSON.parse(JSON.stringify(t));a.label="",a.arrowTypeEnd="none",s.label="",a.fromCluster=e.v,s.toCluster=e.v,d.setEdge(r,i,a,e.name+"-cyclic-special"),d.setEdge(i,n,s,e.name+"-cyclic-special")}else(clusterDb[e.v]||clusterDb[e.w])&&(log.warn("Fixing and trixing - removing XXX",e.v,e.w,e.name),r=getAnchorId(e.v),n=getAnchorId(e.w),d.removeEdge(e.v,e.w,e.name),r!==e.v&&(t.fromCluster=e.v),n!==e.w&&(t.toCluster=e.w),log.warn("Fix Replacing with XXX",r,n,e.name),d.setEdge(r,n,t,e.name))}),log.warn("Adjusted Graph",write(d)),extractor(d,0),log.trace(clusterDb))},extractor=(t,r)=>{if(log.warn("extractor - ",r,write(t),t.children("D")),10<r)log.error("Bailing out");else{var n=t.nodes();let e=!1;for(const d of n){var i=t.children(d);e=e||0<i.length}if(e){log.debug("Nodes = ",n,r);for(const o of n)if(log.debug("Extracting node",o,clusterDb,clusterDb[o]&&!clusterDb[o].externalConnections,!t.parent(o),t.node(o),t.children("D")," Depth ",r),clusterDb[o])if(!clusterDb[o].externalConnections&&t.children(o)&&0<t.children(o).length){log.warn("Cluster without external connections, without a parent and with children",o,r);let e="TB"===t.graph().rankdir?"LR":"TB";clusterDb[o]&&clusterDb[o].clusterData&&clusterDb[o].clusterData.dir&&(e=clusterDb[o].clusterData.dir,log.warn("Fixing dir",clusterDb[o].clusterData.dir,e));var a=new Graph({multigraph:!0,compound:!0}).setGraph({rankdir:e,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});log.warn("Old graph before copy",write(t)),copy(o,t,a,o),t.setNode(o,{clusterNode:!0,id:o,clusterData:clusterDb[o].clusterData,labelText:clusterDb[o].labelText,graph:a}),log.warn("New graph after copy node: (",o,")",write(a)),log.debug("Old graph after copy",write(t))}else log.warn("Cluster ** ",o," **not meeting the criteria !externalConnections:",!clusterDb[o].externalConnections," no parent: ",!t.parent(o)," children ",t.children(o)&&0<t.children(o).length,t.children("D"),r),log.debug(clusterDb);else log.debug("Not a cluster",o,r);n=t.nodes(),log.warn("New list of nodes",n);for(const l of n){var s=t.node(l);log.warn(" Now next level",l,s),s.clusterNode&&extractor(s.graph,r+1)}}else log.debug("Done, no node has children",t.nodes())}},sorter=(t,e)=>{if(0===e.length)return[];let r=Object.assign(e);return e.forEach(e=>{e=t.children(e),e=sorter(t,e);r=[...r,...e]}),r},sortNodesByHierarchy=e=>sorter(e,e.children()),rect=(e,t)=>{log.info("Creating subgraph rect for ",t.id,t);const r=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),n=r.insert("rect",":first-child");e=evaluate(getConfig().flowchart.htmlLabels);const i=r.insert("g").attr("class","cluster-label"),a="markdown"===t.labelType?createText(i,t.labelText,{style:t.labelStyle,useHtmlLabels:e}):i.node().appendChild(createLabel(t.labelText,t.labelStyle,void 0,!0));let s=a.getBBox();if(evaluate(getConfig().flowchart.htmlLabels)){const c=a.children[0],g=d3select(a);s=c.getBoundingClientRect(),g.attr("width",s.width),g.attr("height",s.height)}var d=0*t.padding,o=d/2,l=t.width<=s.width+d?s.width+d:t.width,o=(t.width<=s.width+d?t.diff=(s.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,log.trace("Data ",t,JSON.stringify(t)),n.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-l/2).attr("y",t.y-t.height/2-o).attr("width",l).attr("height",t.height+d),e?i.attr("transform","translate("+(t.x-s.width/2)+", "+(t.y-t.height/2)+")"):i.attr("transform","translate("+t.x+", "+(t.y-t.height/2)+")"),n.node().getBBox());return t.width=o.width,t.height=o.height,t.intersect=function(e){return intersectRect(t,e)},r},noteGroup=(e,t)=>{const r=e.insert("g").attr("class","note-cluster").attr("id",t.id),n=r.insert("rect",":first-child");var e=0*t.padding,i=e/2,i=(n.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-i).attr("y",t.y-t.height/2-i).attr("width",t.width+e).attr("height",t.height+e).attr("fill","none"),n.node().getBBox());return t.width=i.width,t.height=i.height,t.intersect=function(e){return intersectRect(t,e)},r},roundedWithTitle=(e,t)=>{const r=e.insert("g").attr("class",t.classes).attr("id",t.id),n=r.insert("rect",":first-child"),i=r.insert("g").attr("class","cluster-label"),a=r.append("rect"),s=i.node().appendChild(createLabel(t.labelText,t.labelStyle,void 0,!0));let d=s.getBBox();if(evaluate(getConfig().flowchart.htmlLabels)){const c=s.children[0],g=d3select(s);d=c.getBoundingClientRect(),g.attr("width",d.width),g.attr("height",d.height)}d=s.getBBox();var e=0*t.padding,o=e/2,l=t.width<=d.width+t.padding?d.width+t.padding:t.width,o=(t.width<=d.width+t.padding?t.diff=(d.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,n.attr("class","outer").attr("x",t.x-l/2-o).attr("y",t.y-t.height/2-o).attr("width",l+e).attr("height",t.height+e),a.attr("class","inner").attr("x",t.x-l/2-o).attr("y",t.y-t.height/2-o+d.height-1).attr("width",l+e).attr("height",t.height+e-d.height-3),i.attr("transform","translate("+(t.x-d.width/2)+", "+(t.y-t.height/2-t.padding/3+(evaluate(getConfig().flowchart.htmlLabels)?5:3))+")"),n.node().getBBox());return t.height=o.height,t.intersect=function(e){return intersectRect(t,e)},r},divider=(e,t)=>{const r=e.insert("g").attr("class",t.classes).attr("id",t.id),n=r.insert("rect",":first-child");var e=0*t.padding,i=e/2,i=(n.attr("class","divider").attr("x",t.x-t.width/2-i).attr("y",t.y-t.height/2).attr("width",t.width+e).attr("height",t.height+e),n.node().getBBox());return t.width=i.width,t.height=i.height,t.diff=-t.padding/2,t.intersect=function(e){return intersectRect(t,e)},r},shapes={rect:rect,roundedWithTitle:roundedWithTitle,noteGroup:noteGroup,divider:divider};let clusterElems={};const insertCluster=(e,t)=>{log.trace("Inserting cluster");var r=t.shape||"rect";clusterElems[t.id]=shapes[r](e,t)},clear=()=>{clusterElems={}},recursiveRender=async(e,i,a,s)=>{log.info("Graph in recursive render: XXX",write(i),s);const d=i.graph().rankdir,t=(log.trace("Dir in recursive render - dir:",d),e.insert("g").attr("class","root")),r=(i.nodes()?log.info("Recursive render XXX",i.nodes()):log.info("No nodes found for",i),0<i.edges().length&&log.trace("Recursive edges",i.edge(i.edges()[0])),t.insert("g").attr("class","clusters")),n=t.insert("g").attr("class","edgePaths"),o=t.insert("g").attr("class","edgeLabels"),l=t.insert("g").attr("class","nodes");await Promise.all(i.nodes().map(async function(e){const t=i.node(e);var r,n;void 0!==s&&(r=JSON.parse(JSON.stringify(s.clusterData)),log.info("Setting data for cluster XXX (",e,") ",r,s),i.setNode(s.id,r),i.parent(e)||(log.trace("Setting parent",e,s.id),i.setParent(e,s.id,r))),log.info("(Insert) Node XXX"+e+": "+JSON.stringify(i.node(e))),t&&t.clusterNode?(log.info("Cluster identified",e,t.width,i.node(e)),n=(r=await recursiveRender(l,t.graph,a,i.node(e))).elem,updateNodeBounds(t,n),t.diff=r.diff||0,log.info("Node bounds (abc123)",e,t,t.width,t.x,t.y),setNodeElem(n,t),log.warn("Recursive render complete ",n,t)):0<i.children(e).length?(log.info("Cluster - the non recursive path XXX",e,t.id,t,i),log.info(findNonClusterChild(t.id,i)),clusterDb[t.id]={id:findNonClusterChild(t.id,i),node:t}):(log.info("Node - the non recursive path",e,t.id,t),await insertNode(l,i.node(e),d))})),i.edges().forEach(function(e){var t=i.edge(e.v,e.w,e.name);log.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),log.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(i.edge(e))),log.info("Fix",clusterDb,"ids:",e.v,e.w,"Translateing: ",clusterDb[e.v],clusterDb[e.w]),insertEdgeLabel(o,t)}),i.edges().forEach(function(e){log.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))}),log.info("#############################################"),log.info("###                Layout                 ###"),log.info("#############################################"),log.info(i),layout(i),log.info("Graph after layout:",write(i));let c=0;return sortNodesByHierarchy(i).forEach(function(e){var t=i.node(e);log.info("Position "+e+": "+JSON.stringify(i.node(e))),log.info("Position "+e+": ("+t.x,","+t.y,") width: ",t.width," height: ",t.height),(!t||!t.clusterNode)&&0<i.children(e).length?(insertCluster(r,t),clusterDb[t.id].node=t):positionNode(t)}),i.edges().forEach(function(e){var t=i.edge(e),e=(log.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(t),t),insertEdge(n,e,t,clusterDb,a,i));positionEdgeLabel(t,e)}),i.nodes().forEach(function(e){var t=i.node(e);log.info(e,t.type,t.diff),"group"===t.type&&(c=t.diff)}),{elem:t,diff:c}},render=async(e,t,r,n,i)=>{insertMarkers(e,r,n,i),clear$2(),clear$3(),clear(),clear$1(),log.warn("Graph at first:",write(t)),adjustClustersAndEdges(t),log.warn("Graph after:",write(t)),await recursiveRender(e,t,n)};export{render as r};