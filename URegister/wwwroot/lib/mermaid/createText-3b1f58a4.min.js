import{l as log,L as decodeEntities}from"./mermaid-768dc893.js";import{fromMarkdown}from"mdast-util-from-markdown";import{dedent}from"ts-dedent";function preprocessMarkdown(t){t=t.replace(/\n{2,}/g,"\n");return dedent(t)}function markdownToLines(t){t=preprocessMarkdown(t);const e=fromMarkdown(t)["children"],r=[[]];let i=0;return e.forEach(t=>{"paragraph"===t.type&&t.children.forEach(t=>{!function e(n,o="normal"){if("text"===n.type){const t=n.value.split("\n");t.forEach((t,e)=>{0!==e&&(i++,r.push([])),t.split(" ").forEach(t=>{t&&r[i].push({content:t,type:o})})})}else"strong"!==n.type&&"emphasis"!==n.type||n.children.forEach(t=>{e(t,n.type)})}(t)})}),r}function markdownToHTML(t){const e=fromMarkdown(t)["children"];return e.map(function t(e){return"text"===e.type?e.value.replace(/\n/g,"<br/>"):"strong"===e.type?`<strong>${e.children.map(t).join("")}</strong>`:"emphasis"===e.type?`<em>${e.children.map(t).join("")}</em>`:"paragraph"===e.type?`<p>${e.children.map(t).join("")}</p>`:"Unsupported markdown: "+e.type}).join("")}function splitTextToChars(t){return Intl.Segmenter?[...(new Intl.Segmenter).segment(t)].map(t=>t.segment):[...t]}function splitWordToFitWidth(t,e){return splitWordToFitWidthRecursion(t,[],splitTextToChars(e.content),e.type)}function splitWordToFitWidthRecursion(t,e,n,o){if(0===n.length)return[{content:e.join(""),type:o},{content:"",type:o}];var[r,...i]=n;const a=[...e,r];return t([{content:a.join(""),type:o}])?splitWordToFitWidthRecursion(t,a,i,o):(0===e.length&&r&&(e.push(r),n.shift()),[{content:e.join(""),type:o},{content:n.join(""),type:o}])}function splitLineToFitWidth(t,e){if(t.some(({content:t})=>t.includes("\n")))throw new Error("splitLineToFitWidth does not support newlines in the line");return splitLineToFitWidthRecursion(t,e)}function splitLineToFitWidthRecursion(t,e,n=[],o=[]){if(0===t.length)return 0<o.length&&n.push(o),0<n.length?n:[];let r="";" "===t[0].content&&(r=" ",t.shift());var i=t.shift()??{content:" ",type:"normal"};const a=[...o];return""!==r&&a.push({content:r,type:"normal"}),a.push(i),e(a)?splitLineToFitWidthRecursion(t,e,n,a):(0<o.length?(n.push(o),t.unshift(i)):i.content&&([o,i]=splitWordToFitWidth(e,i),n.push([o]),i.content&&t.unshift(i)),splitLineToFitWidthRecursion(t,e,n))}function applyStyle(t,e){e&&t.attr("style",e)}function addHtmlSpan(t,e,n,o,r=!1){const i=t.append("foreignObject"),a=i.append("xhtml:div");var t=e.label,s=e.isNode?"nodeLabel":"edgeLabel";a.html(`
    <span class="${s} ${o}" `+(e.labelStyle?'style="'+e.labelStyle+'"':"")+">"+t+"</span>"),applyStyle(a,e.labelStyle),a.style("display","table-cell"),a.style("white-space","nowrap"),a.style("max-width",n+"px"),a.attr("xmlns","http://www.w3.org/1999/xhtml"),r&&a.attr("class","labelBkg");let l=a.node().getBoundingClientRect();return l.width===n&&(a.style("display","table"),a.style("white-space","break-spaces"),a.style("width",n+"px"),l=a.node().getBoundingClientRect()),i.style("width",l.width),i.style("height",l.height),i.node()}function createTspan(t,e,n){return t.append("tspan").attr("class","text-outer-tspan").attr("x",0).attr("y",e*n-.1+"em").attr("dy",n+"em")}function computeWidthOfText(t,e,n){const o=t.append("text"),r=createTspan(o,1,e);updateTextContentAndStyles(r,n);t=r.node().getComputedTextLength();return o.remove(),t}function createFormattedText(e,t,n,o=!1){const r=t.append("g"),i=r.insert("rect").attr("class","background"),a=r.append("text").attr("y","-10.1");let s=0;for(const p of n){var l=t=>computeWidthOfText(r,1.1,t)<=e;for(const c of l(p)?[p]:splitLineToFitWidth(p,l))updateTextContentAndStyles(createTspan(a,s,1.1),c),s++}return o?(t=a.node().getBBox(),i.attr("x",-2).attr("y",-2).attr("width",t.width+4).attr("height",t.height+4),r.node()):a.node()}function updateTextContentAndStyles(o,t){o.text(""),t.forEach((t,e)=>{const n=o.append("tspan").attr("font-style","emphasis"===t.type?"italic":"normal").attr("class","text-inner-tspan").attr("font-weight","strong"===t.type?"bold":"normal");0===e?n.text(t.content):n.text(" "+t.content)})}const createText=(t,e="",{style:n="",isTitle:o=!1,classes:r="",useHtmlLabels:i=!0,isNode:a=!0,width:s=200,addSvgBackground:l=!1}={})=>{return log.info("createText",e,n,o,r,i,a,l),i?(o=markdownToHTML(e),addHtmlSpan(t,{isNode:a,label:decodeEntities(o).replace(/fa[blrs]?:fa-[\w-]+/g,t=>`<i class='${t.replace(":"," ")}'></i>`),labelStyle:n.replace("fill:","color:")},s,r,l)):createFormattedText(s,t,markdownToLines(e),l)};export{createText as c};