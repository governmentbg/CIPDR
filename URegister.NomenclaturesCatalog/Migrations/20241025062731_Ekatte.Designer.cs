// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using URegister.RegistersCatalog.Data;

#nullable disable

namespace URegister.NomenclaturesCatalog.Migrations
{
    [DbContext(typeof(NomenclaturesCatalogDbContext))]
    [Migration("20241025062731_Ekatte")]
    partial class Ekatte
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RulesEngine.Models.Rule", b =>
                {
                    b.Property<string>("RuleName")
                        .HasColumnType("text")
                        .HasColumnName("rule_name");

                    b.Property<string>("Actions")
                        .HasColumnType("text")
                        .HasColumnName("actions");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<string>("Expression")
                        .HasColumnType("text")
                        .HasColumnName("expression");

                    b.Property<string>("Operator")
                        .HasColumnType("text")
                        .HasColumnName("operator");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<int>("RuleExpressionType")
                        .HasColumnType("integer")
                        .HasColumnName("rule_expression_type");

                    b.Property<string>("RuleNameFK")
                        .HasColumnType("text")
                        .HasColumnName("rule_name_fk");

                    b.Property<string>("SuccessEvent")
                        .HasColumnType("text")
                        .HasColumnName("success_event");

                    b.Property<string>("WorkflowName")
                        .HasColumnType("text")
                        .HasColumnName("workflow_name");

                    b.HasKey("RuleName")
                        .HasName("pk_rules");

                    b.HasIndex("RuleNameFK")
                        .HasDatabaseName("ix_rules_rule_name_fk");

                    b.HasIndex("WorkflowName")
                        .HasDatabaseName("ix_rules_workflow_name");

                    b.ToTable("rules", (string)null);
                });

            modelBuilder.Entity("RulesEngine.Models.ScopedParam", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Expression")
                        .HasColumnType("text")
                        .HasColumnName("expression");

                    b.Property<string>("RuleName")
                        .HasColumnType("text")
                        .HasColumnName("rule_name");

                    b.Property<string>("WorkflowName")
                        .HasColumnType("text")
                        .HasColumnName("workflow_name");

                    b.HasKey("Name")
                        .HasName("pk_scoped_param");

                    b.HasIndex("RuleName")
                        .HasDatabaseName("ix_scoped_param_rule_name");

                    b.HasIndex("WorkflowName")
                        .HasDatabaseName("ix_scoped_param_workflow_name");

                    b.ToTable("scoped_param", (string)null);
                });

            modelBuilder.Entity("RulesEngine.Models.Workflow", b =>
                {
                    b.Property<string>("WorkflowName")
                        .HasColumnType("text")
                        .HasColumnName("workflow_name");

                    b.Property<int>("RuleExpressionType")
                        .HasColumnType("integer")
                        .HasColumnName("rule_expression_type");

                    b.HasKey("WorkflowName")
                        .HasName("pk_workflows");

                    b.ToTable("workflows", (string)null);
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.AdditionalColumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CodeableConceptId")
                        .HasColumnType("bigint")
                        .HasColumnName("codeable_concept_id")
                        .HasComment("Идентификатор на номенклатура");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasComment("Име на колона");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("value")
                        .HasComment("Стойност");

                    b.Property<string>("ValueEn")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("value_en")
                        .HasComment("Стойност ЕН");

                    b.HasKey("Id")
                        .HasName("pk_additional_columns");

                    b.HasIndex("CodeableConceptId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_additional_columns_codeable_concept_id_name");

                    b.ToTable("additional_columns", null, t =>
                        {
                            t.HasComment("Допълнителни данни за номенклатура");
                        });
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.CodeableConcept", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code")
                        .HasComment("Код");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by")
                        .HasComment("Създаден от");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_on")
                        .HasComment("Дата и час на записа");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("date")
                        .HasColumnName("date_from")
                        .HasComment("Валидна от дата");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("date")
                        .HasColumnName("date_to")
                        .HasComment("Валидна до дата");

                    b.Property<string>("HolderCode")
                        .HasColumnType("text")
                        .HasColumnName("holder_code")
                        .HasComment("Горно ниво в друг номенклатурен тип");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text")
                        .HasColumnName("parent_code")
                        .HasComment("Код не горно ниво при дървовидна номенклатура");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("type")
                        .HasComment("Тип на номенклатура");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value")
                        .HasComment("Стойност");

                    b.Property<string>("ValueEn")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value_en")
                        .HasComment("Стойност ЕН");

                    b.HasKey("Id")
                        .HasName("pk_codeable_concepts");

                    b.ToTable("codeable_concepts", null, t =>
                        {
                            t.HasComment("Номенклатура");
                        });
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.CodeableConceptAdministration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AdministrationId")
                        .HasColumnType("integer")
                        .HasColumnName("administration_id")
                        .HasComment("Идентификатор на администрация");

                    b.Property<long>("CodeableConceptId")
                        .HasColumnType("bigint")
                        .HasColumnName("codeable_concept_id")
                        .HasComment("Идентификатор на номенклатура");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by")
                        .HasComment("Създаден от");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_on")
                        .HasComment("Дата и час на записа");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid")
                        .HasComment("Допустима ли е за регистъра");

                    b.HasKey("Id")
                        .HasName("pk_codeable_concept_administrations");

                    b.HasIndex("CodeableConceptId", "AdministrationId")
                        .IsUnique()
                        .HasDatabaseName("ix_codeable_concept_administrations_codeable_concept_id_admini");

                    b.ToTable("codeable_concept_administrations", null, t =>
                        {
                            t.HasComment("Допустимост на номенклатура за регистъра");
                        });
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.NomenclatureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HolderType")
                        .HasColumnType("text")
                        .HasColumnName("holder_type")
                        .HasComment("Горно ниво в друг номенклатурен тип");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .HasComment("Име");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("type")
                        .HasComment("Тип");

                    b.HasKey("Id")
                        .HasName("pk_nomenclature_types");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("ix_nomenclature_types_type");

                    b.ToTable("nomenclature_types", null, t =>
                        {
                            t.HasComment("Тип номенклатура");
                        });
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.NomenclatureTypeAdministration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AdministrationId")
                        .HasColumnType("integer")
                        .HasColumnName("administration_id")
                        .HasComment("Идентификатор на администрация");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by")
                        .HasComment("Създаден от");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_on")
                        .HasComment("Дата и час на записа");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid")
                        .HasComment("Допустима ли е за регистъра");

                    b.Property<bool>("IsValidAllItems")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid_all_items")
                        .HasComment("Допустими ли са всички стойности от CodeableConcept");

                    b.Property<int>("NomenclatureTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("nomenclature_type_id")
                        .HasComment("Идентификатор на тип");

                    b.HasKey("Id")
                        .HasName("pk_nomenclature_type_administrations");

                    b.HasIndex("NomenclatureTypeId", "AdministrationId")
                        .IsUnique()
                        .HasDatabaseName("ix_nomenclature_type_administrations_nomenclature_type_id_admi");

                    b.ToTable("nomenclature_type_administrations", null, t =>
                        {
                            t.HasComment("Допустим тип номенклатура");
                        });
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkDoc", b =>
                {
                    b.Property<int>("Document")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("document");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Document"));

                    b.Property<DateTime?>("Doc_act")
                        .HasColumnType("date")
                        .HasColumnName("doc_act");

                    b.Property<DateTime?>("Doc_date")
                        .HasColumnType("date")
                        .HasColumnName("doc_date");

                    b.Property<string>("Doc_inst")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("doc_inst");

                    b.Property<string>("Doc_kind")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("doc_kind");

                    b.Property<string>("Doc_name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("doc_name");

                    b.Property<string>("Doc_name_en")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("doc_name_en");

                    b.Property<string>("Doc_num")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("doc_num");

                    b.Property<string>("Dv_danni")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("dv_danni");

                    b.Property<DateTime?>("Dv_date")
                        .HasColumnType("date")
                        .HasColumnName("dv_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Document")
                        .HasName("pk_ek_doc");

                    b.ToTable("ek_doc", null, t =>
                        {
                            t.HasComment("Импрортирани документи от nrnm.nsi.bg");
                        });
                });

            modelBuilder.Entity("RulesEngine.Models.Rule", b =>
                {
                    b.HasOne("RulesEngine.Models.Rule", null)
                        .WithMany("Rules")
                        .HasForeignKey("RuleNameFK")
                        .HasConstraintName("fk_rules_rules_rule_name_fk");

                    b.HasOne("RulesEngine.Models.Workflow", null)
                        .WithMany("Rules")
                        .HasForeignKey("WorkflowName")
                        .HasConstraintName("fk_rules_workflows_workflow_name");
                });

            modelBuilder.Entity("RulesEngine.Models.ScopedParam", b =>
                {
                    b.HasOne("RulesEngine.Models.Rule", null)
                        .WithMany("LocalParams")
                        .HasForeignKey("RuleName")
                        .HasConstraintName("fk_scoped_param_rules_rule_name");

                    b.HasOne("RulesEngine.Models.Workflow", null)
                        .WithMany("GlobalParams")
                        .HasForeignKey("WorkflowName")
                        .HasConstraintName("fk_scoped_param_workflows_workflow_name");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.AdditionalColumn", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Data.Models.CodeableConcept", "CodeableConcept")
                        .WithMany("AdditionalColumns")
                        .HasForeignKey("CodeableConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_additional_columns_codeable_concepts_codeable_concept_id");

                    b.Navigation("CodeableConcept");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.CodeableConceptAdministration", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Data.Models.CodeableConcept", "CodeableConcept")
                        .WithMany("Administrations")
                        .HasForeignKey("CodeableConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_codeable_concept_administrations_codeable_concepts_codeable");

                    b.Navigation("CodeableConcept");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.NomenclatureTypeAdministration", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Data.Models.NomenclatureType", "NomenclatureType")
                        .WithMany("Administrations")
                        .HasForeignKey("NomenclatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nomenclature_type_administrations_nomenclature_types_nomenc");

                    b.Navigation("NomenclatureType");
                });

            modelBuilder.Entity("RulesEngine.Models.Rule", b =>
                {
                    b.Navigation("LocalParams");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("RulesEngine.Models.Workflow", b =>
                {
                    b.Navigation("GlobalParams");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.CodeableConcept", b =>
                {
                    b.Navigation("AdditionalColumns");

                    b.Navigation("Administrations");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.NomenclatureType", b =>
                {
                    b.Navigation("Administrations");
                });
#pragma warning restore 612, 618
        }
    }
}
