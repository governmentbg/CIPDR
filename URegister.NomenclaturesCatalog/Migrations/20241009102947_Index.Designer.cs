// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using URegister.RegistersCatalog.Data;

#nullable disable

namespace URegister.NomenclaturesCatalog.Migrations
{
    [DbContext(typeof(NomenclaturesCatalogDbContext))]
    [Migration("20241009102947_Index")]
    partial class Index
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RulesEngine.Models.Rule", b =>
                {
                    b.Property<string>("RuleName")
                        .HasColumnType("text")
                        .HasColumnName("rule_name");

                    b.Property<string>("Actions")
                        .HasColumnType("text")
                        .HasColumnName("actions");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<string>("Expression")
                        .HasColumnType("text")
                        .HasColumnName("expression");

                    b.Property<string>("Operator")
                        .HasColumnType("text")
                        .HasColumnName("operator");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<int>("RuleExpressionType")
                        .HasColumnType("integer")
                        .HasColumnName("rule_expression_type");

                    b.Property<string>("RuleNameFK")
                        .HasColumnType("text")
                        .HasColumnName("rule_name_fk");

                    b.Property<string>("SuccessEvent")
                        .HasColumnType("text")
                        .HasColumnName("success_event");

                    b.Property<string>("WorkflowName")
                        .HasColumnType("text")
                        .HasColumnName("workflow_name");

                    b.HasKey("RuleName")
                        .HasName("pk_rules");

                    b.HasIndex("RuleNameFK")
                        .HasDatabaseName("ix_rules_rule_name_fk");

                    b.HasIndex("WorkflowName")
                        .HasDatabaseName("ix_rules_workflow_name");

                    b.ToTable("rules", (string)null);
                });

            modelBuilder.Entity("RulesEngine.Models.ScopedParam", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Expression")
                        .HasColumnType("text")
                        .HasColumnName("expression");

                    b.Property<string>("RuleName")
                        .HasColumnType("text")
                        .HasColumnName("rule_name");

                    b.Property<string>("WorkflowName")
                        .HasColumnType("text")
                        .HasColumnName("workflow_name");

                    b.HasKey("Name")
                        .HasName("pk_scoped_param");

                    b.HasIndex("RuleName")
                        .HasDatabaseName("ix_scoped_param_rule_name");

                    b.HasIndex("WorkflowName")
                        .HasDatabaseName("ix_scoped_param_workflow_name");

                    b.ToTable("scoped_param", (string)null);
                });

            modelBuilder.Entity("RulesEngine.Models.Workflow", b =>
                {
                    b.Property<string>("WorkflowName")
                        .HasColumnType("text")
                        .HasColumnName("workflow_name");

                    b.Property<int>("RuleExpressionType")
                        .HasColumnType("integer")
                        .HasColumnName("rule_expression_type");

                    b.HasKey("WorkflowName")
                        .HasName("pk_workflows");

                    b.ToTable("workflows", (string)null);
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.AdditionalColumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasComment("Име на колона");

                    b.Property<long>("NomenclatureId")
                        .HasColumnType("bigint")
                        .HasColumnName("nomenclature_id")
                        .HasComment("Идентификатор на номенклатура");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("value")
                        .HasComment("Стойност");

                    b.Property<string>("ValueEn")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("value_en")
                        .HasComment("Стойност ЕН");

                    b.HasKey("Id")
                        .HasName("pk_additional_columns");

                    b.HasIndex("NomenclatureId")
                        .HasDatabaseName("ix_additional_columns_nomenclature_id");

                    b.ToTable("additional_columns", null, t =>
                        {
                            t.HasComment("Допълнителни данни за номенклатура");
                        });
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.CodeableConcept", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code")
                        .HasComment("Код");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by")
                        .HasComment("Създаден от");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_on")
                        .HasComment("Дата и час на записа");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("date")
                        .HasColumnName("date_from")
                        .HasComment("Валидна от дата");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("date")
                        .HasColumnName("date_to")
                        .HasComment("Валидна до дата");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text")
                        .HasColumnName("parent_code")
                        .HasComment("Код не горно ниво при дървовидна номенклатура");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("type")
                        .HasComment("Тип на номенклатура");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value")
                        .HasComment("Стойност");

                    b.Property<string>("ValueEn")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value_en")
                        .HasComment("Стойност ЕН");

                    b.HasKey("Id")
                        .HasName("pk_codeable_concepts");

                    b.ToTable("codeable_concepts", null, t =>
                        {
                            t.HasComment("Номенклатура");
                        });
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.CodeableConceptAdministration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AdministrationId")
                        .HasColumnType("integer")
                        .HasColumnName("administration_id")
                        .HasComment("Идентификатор на администрация");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by")
                        .HasComment("Създаден от");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_on")
                        .HasComment("Дата и час на записа");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid")
                        .HasComment("Допустима ли е за регистъра");

                    b.Property<long>("NomenclatureId")
                        .HasColumnType("bigint")
                        .HasColumnName("nomenclature_id")
                        .HasComment("Идентификатор на номенклатура");

                    b.HasKey("Id")
                        .HasName("pk_codeable_concept_registers");

                    b.HasIndex("NomenclatureId", "AdministrationId")
                        .IsUnique()
                        .HasDatabaseName("ix_codeable_concept_registers_nomenclature_id_administration_id");

                    b.ToTable("codeable_concept_registers", null, t =>
                        {
                            t.HasComment("Номенклатура");
                        });
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.NomenclatureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .HasComment("Име");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("type")
                        .HasComment("Тип");

                    b.HasKey("Id")
                        .HasName("pk_nomenclature_types");

                    b.ToTable("nomenclature_types", null, t =>
                        {
                            t.HasComment("Тип номенклатура");
                        });
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.NomenclatureTypeAdministration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AdministrationId")
                        .HasColumnType("integer")
                        .HasColumnName("administration_id")
                        .HasComment("Идентификатор на администрация");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by")
                        .HasComment("Създаден от");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_on")
                        .HasComment("Дата и час на записа");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid")
                        .HasComment("Допустима ли е за регистъра");

                    b.Property<bool>("IsValidAllItems")
                        .HasColumnType("boolean")
                        .HasColumnName("is_valid_all_items")
                        .HasComment("Допустими ли са всички стойности от CodeableConcept");

                    b.Property<int>("NomenclatureTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("nomenclature_type_id")
                        .HasComment("Идентификатор на тип");

                    b.HasKey("Id")
                        .HasName("pk_nomenclature_type_registers");

                    b.HasIndex("NomenclatureTypeId")
                        .HasDatabaseName("ix_nomenclature_type_registers_nomenclature_type_id");

                    b.ToTable("nomenclature_type_registers", null, t =>
                        {
                            t.HasComment("Допустим тип номенклатура");
                        });
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkArea", b =>
                {
                    b.Property<int>("AreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("aread_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AreadId"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.HasKey("AreadId")
                        .HasName("pk_ek_areas");

                    b.ToTable("ek_areas", "ekatte");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("CountryId")
                        .HasName("pk_ek_countries");

                    b.ToTable("ek_countries", "ekatte");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkDistrict", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DistrictId"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Oblast")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("oblast");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("Rghi")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rghi");

                    b.HasKey("DistrictId")
                        .HasName("pk_ek_districts");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_ek_districts_country_id");

                    b.ToTable("ek_districts", "ekatte");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkEkatte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<string>("Altitude")
                        .HasColumnType("text")
                        .HasColumnName("altitude");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.Property<string>("Kmetstvo")
                        .HasColumnType("text")
                        .HasColumnName("kmetstvo");

                    b.Property<int?>("MunicipalId")
                        .HasColumnType("integer")
                        .HasColumnName("municipal_id");

                    b.Property<string>("MunincipalityCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("munincipality_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Oblast")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("oblast");

                    b.Property<string>("Obstina")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("obstina");

                    b.Property<string>("TVM")
                        .HasColumnType("text")
                        .HasColumnName("t_v_m");

                    b.Property<string>("Tsb")
                        .HasColumnType("text")
                        .HasColumnName("tsb");

                    b.HasKey("Id")
                        .HasName("pk_ek_ekatte");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_ek_ekatte_country_id");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_ek_ekatte_district_id");

                    b.HasIndex("MunicipalId")
                        .HasDatabaseName("ix_ek_ekatte_municipal_id");

                    b.ToTable("ek_ekatte", "ekatte");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkMunincipality", b =>
                {
                    b.Property<int>("MunicipalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("municipality_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MunicipalityId"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("municipality");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("MunicipalityId")
                        .HasName("pk_ek_munincipalities");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_ek_munincipalities_district_id");

                    b.ToTable("ek_munincipalities", "ekatte");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Raion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("raion");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("region_code");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlement_id");

                    b.HasKey("Id")
                        .HasName("pk_ek_regions");

                    b.HasIndex("SettlementId")
                        .HasDatabaseName("ix_ek_regions_settlement_id");

                    b.ToTable("ek_regions", "ekatte");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkSobr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<string>("Area1")
                        .HasColumnType("text")
                        .HasColumnName("area1");

                    b.Property<string>("Area2")
                        .HasColumnType("text")
                        .HasColumnName("area2");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.Property<int?>("MunicipalId")
                        .HasColumnType("integer")
                        .HasColumnName("municipal_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_ek_sobr");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_ek_sobr_district_id");

                    b.HasIndex("MunicipalId")
                        .HasDatabaseName("ix_ek_sobr_municipal_id");

                    b.ToTable("ek_sobr", "ekatte");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkStreet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("date")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("date")
                        .HasColumnName("date_to");

                    b.Property<string>("Ekatte")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("StreetType")
                        .HasColumnType("integer")
                        .HasColumnName("street_type");

                    b.HasKey("Id")
                        .HasName("pk_ek_streets");

                    b.ToTable("ek_streets", "ekatte");
                });

            modelBuilder.Entity("RulesEngine.Models.Rule", b =>
                {
                    b.HasOne("RulesEngine.Models.Rule", null)
                        .WithMany("Rules")
                        .HasForeignKey("RuleNameFK")
                        .HasConstraintName("fk_rules_rules_rule_name_fk");

                    b.HasOne("RulesEngine.Models.Workflow", null)
                        .WithMany("Rules")
                        .HasForeignKey("WorkflowName")
                        .HasConstraintName("fk_rules_workflows_workflow_name");
                });

            modelBuilder.Entity("RulesEngine.Models.ScopedParam", b =>
                {
                    b.HasOne("RulesEngine.Models.Rule", null)
                        .WithMany("LocalParams")
                        .HasForeignKey("RuleName")
                        .HasConstraintName("fk_scoped_param_rules_rule_name");

                    b.HasOne("RulesEngine.Models.Workflow", null)
                        .WithMany("GlobalParams")
                        .HasForeignKey("WorkflowName")
                        .HasConstraintName("fk_scoped_param_workflows_workflow_name");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.AdditionalColumn", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Data.Models.CodeableConcept", "Nomenclature")
                        .WithMany("AdditionalColumns")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_additional_columns_codeable_concepts_nomenclature_id");

                    b.Navigation("Nomenclature");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.CodeableConceptAdministration", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Data.Models.CodeableConcept", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_codeable_concept_registers_codeable_concepts_nomenclature_id");

                    b.Navigation("Nomenclature");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.NomenclatureTypeAdministration", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Data.Models.NomenclatureType", "NomenclatureType")
                        .WithMany("Administrations")
                        .HasForeignKey("NomenclatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nomenclature_type_registers_nomenclature_types_nomenclature");

                    b.Navigation("NomenclatureType");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkDistrict", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ek_districts_ek_countries_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkEkatte", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ek_ekatte_ek_countries_country_id");

                    b.HasOne("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_ek_ekatte_ek_districts_district_id");

                    b.HasOne("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkMunincipality", "Munincipality")
                        .WithMany()
                        .HasForeignKey("MunicipalId")
                        .HasConstraintName("fk_ek_ekatte_ek_munincipalities_municipal_id");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Munincipality");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkMunincipality", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_ek_munincipalities_ek_districts_district_id");

                    b.Navigation("District");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkRegion", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkEkatte", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId")
                        .HasConstraintName("fk_ek_regions_ek_ekatte_settlement_id");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkSobr", b =>
                {
                    b.HasOne("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_ek_sobr_ek_districts_district_id");

                    b.HasOne("URegister.NomenclaturesCatalog.Infrastructure.Data.Models.Nomenclatures.EkMunincipality", "Munincipality")
                        .WithMany()
                        .HasForeignKey("MunicipalId")
                        .HasConstraintName("fk_ek_sobr_ek_munincipalities_municipal_id");

                    b.Navigation("District");

                    b.Navigation("Munincipality");
                });

            modelBuilder.Entity("RulesEngine.Models.Rule", b =>
                {
                    b.Navigation("LocalParams");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("RulesEngine.Models.Workflow", b =>
                {
                    b.Navigation("GlobalParams");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.CodeableConcept", b =>
                {
                    b.Navigation("AdditionalColumns");
                });

            modelBuilder.Entity("URegister.NomenclaturesCatalog.Data.Models.NomenclatureType", b =>
                {
                    b.Navigation("Administrations");
                });
#pragma warning restore 612, 618
        }
    }
}
